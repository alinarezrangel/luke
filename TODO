+ Finish autotest.lk, so it works like this:

  include 'share/luke/autotest.lk'
  check = group {
    test 'tests/basic.at',
    test 'tests/advanced.at,
  }

  where each:

    test 'tests/basic.at'

  will:
    - assign the tests a number each
    - print a 'running test blah' message
    - cd tests/testsuite.dir/nnn
    - run the test
        + which, in this case, will write some files and then spawn
          a new luke invocation over those files
    - compare actual and expected results
    - display 'ok', 'skip', 'xfail' or 'fail'

+ Convert Lua script heavy Blueprint to be more Build rule oriented

+ autotest.lk and c.lk shouldn't be separate files

  distribution of the `luke` self-extracting file should be all that's
  required in a client project -- having to remember to also ship a bunch
  of ?.lk files is not very clean.

+ support unpacking with Make or python, or something else that will work
  on Windows!

- Use md5 instead of timestamps (optionally?)

- Instead of path.join, consider automatic separator rewriting.  And in
  any case, make sure include works on windows!

- Add a real copy function to lpathlib, and use it instead of os.execute.

- Add a chmod function to lpathlib, and use it to give ./luke an execute
  bit after rebuilding.

- Write a Makefile.am parser for declarative (rule free) Makefile.am's

- Provide all the automatic GNUish (gnulib-toolish?) make target support
  that Automake (+ gnulib conventions and hackery) supply

- Write a configure.ac parser for declarative (shell-free) configures

- Try to get bootstrap to work in strict mode (luke -s), and then make
  it the default again

- Fix 'path library unknown' value in path._VERSION.

? Remove ldebug? (can't, but probably all but a few methods could be dropped)

? Scan system headers for unsafe tokens instead of keeping a manual list.

? teach squishy to use ';' instead of '\n' as much as possible, since '\n'
  requires a two character escape sequence when embedded in a C string.

? Add an absname function to lpathlib that normalises its result.
