-- Luke includefile to run unit tests.
--
-- Copyright (C) 2011 Gary V. Vaughan
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

include "tests/package.lua"

-- UTILITIES.

function __error (...)
  stderr:write (...)
  os.exit (1)
end

-- Return the following using FRAME_CHARACTER in the border.
-- ## ------- ##
-- ## MESSAGE ##
-- ## ------- ##
function __text_box (message, frame_character)
  frame_character = frame_character or "-"
  local border = "## " .. message:gsub (".", frame_character) .. " ##"
  return border .. "\n## " .. message .. " ##\n" .. border
end

function __cat (file)
  f = io.open (file, "r") -- FIXME: error checking!
  io.stdout:write (f:read"*a")
  f:close ()
end

function os.diff (f1, f2) -- FIXME: do this without shelling out
  return 0 == os.execute ("diff -u "..f1.." "..f2)
end

function pass ()
  return pass
end

-- Begin test suite.
-- Note: Because we change directories to run each test group,
--       all the directories we need are saved with absolute
--       paths so that we don't get lost later.

local as_me = "testsuite"
local at_cwd = os.path.getcwd ()
local at_dir = os.path.join (at_cwd, "tests")

-- The directory the whole suite runs in.
-- Should be absolutely to let the user `cd' at will.
local at_suite_dir

-- The file containing the exit status of the last command.
local at_status_file

-- The files containing the output of the tested command
local at_stdout
local at_stderr

function AT_INIT (testsuite_name)
  AT_INIT = function (testsuite_name)
    usererror ("AT_INIT: invoked multiple times")
  end

  if not AT_PACKAGE_BUGREPORT then
    usererror (testsuite_name ..
      ": AT_PACKAGE_BUGREPORT is missing, consider writing package.lua")
  end

  AT_TESTSUITE_NAME = AT_PACKAGE_STRING .. " test suite"
  if testsuite_name ~= nil then
    AT_TESTSUITE_NAME = AT_TESTSUITE_NAME .. ": " .. testsuite_name
  end

  print (__text_box (AT_TESTSUITE_NAME))

  at_suite_dir = os.path.join (at_dir, as_me .. ".dir")
end


-- Start a category of related test groups.  If multiple groups are executed,
-- output TEXT as a banner prior to any test from the category.
function AT_BANNER (text)
  print ("\n" .. text .. "\n")
end


-- Start a group of related tests.  The group is testing what
-- DESCRIPTION says.

local at_failed = false
local testnumber = 0
local test_sub_dir

function AT_SETUP (...)
  testnumber = 1 + testnumber
  io.stderr:write (string.format ("%4d. ", testnumber) ..
      table.concat ({...}, " ") .. "... ")
  io.stderr:flush ()
  os.path.mkdir (at_suite_dir)
  test_sub_dir = os.path.join (at_suite_dir,
      string.format("%04d", testnumber))

  at_status_file = os.path.join (test_sub_dir, "at-status")
  at_stdout = os.path.join (test_sub_dir, "at-stdout")
  at_stderr = os.path.join (test_sub_dir, "at-stderr")

  os.path.remover (test_sub_dir)
  os.path.mkdir (test_sub_dir)
  os.path.cd (test_sub_dir)
end


-- Complete a group of related tests.

function AT_CLEANUP ()
  os.path.cd (at_cwd)
  if not at_failed then
    os.path.remover (test_sub_dir)
  end
  os.remove (at_suite_dir)
end

-- Initialise an input data FILE with the given CONTENTS, which should end
-- with an end of line.

function AT_DATA (file, contents)
  local good = io.open (file, "w")
  contents = ("\n" .. contents):
            gsub ("\n[\t ]+", "\n"):
            gsub ("^\n", "")
  if contents:sub(-1) ~= "\n" then
    contents = contents .. "\n"
  end
  good:write (contents)
  good:close ()
end

-- Execute a test by running COMMAND. This call should return with
-- STATUS, while producing expected STDOUT and STDERR contents.
--
-- STATUS, STDOUT and STDERR are not checked unless non-nil.

function AT_CHECK (command, status, stdout, stderr, callback)
  local at_status = os.execute (command .. ">" .. at_stdout .. " 2>" .. at_stderr)

  at_failed = false

  -- check stderr.
  local content = io.open (at_stderr, "r")
  if stderr == "ignore" then
    pass ()
  elseif stderr == "stderr" then
    if content and content:read() then
      io.stdout:write ("stderr:\n")
      __cat (at_stderr)
      os.path.copy (at_stderr, "stderr")
    end
  elseif stderr == nil then
    at_failed = not os.diff ("/dev/null", at_stderr)
  else
    at_failed = not os.diff (stderr, at_stderr)
  end

  -- check stdout.
  local content = io.open (at_stdout, "r")
  if stdout == "ignore" then
    pass ()
  elseif stdout == "stdout" then
    if content and content:read() then
      io.stdout:write ("stdout:\n")
      __cat (at_stdout)
      os.path.copy (at_stdout, "stdout")
    end
  elseif stdout == nil then
    at_failed = not os.diff ("/dev/null", at_stdout)
  else
    at_failed = not os.diff (stdout, at_stdout)
  end

  -- check return status. Don't `skip' if we are precisely checking for 77
  local file = io.open (at_status_file, "w")
  file:write (tostring (at_status) .. "\n")

  if status == 77 then
    result = 77
  elseif status ~= "ignore" then
    -- do nothing
    result = 0
  elseif status ~= at_status then
    io.stdout:write ("exit code was " .. at_status .. ", expected " .. status .. "\n")
    at_failed = true
  end

  if callback then callback () end

  if at_failed then
    io.stderr:write"failed\n"
  else
    io.stderr:write"ok\n"
  end
end

function AT_FAILED (status)
  at_failed = status
end
