-- Luke Blueprint.
--
-- Copyright (C) 2011 Gary V. Vaughan
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.


-- Imports
-- =======

package.path = os.path.join (PKGROOT, "build-aux", "?.lua")

local clex       = require "clex"
local expand     = require "expand"
local lua2header = require "lua2header"
local squash     = require "squash"

include "tests/testsuite.at"


-- Aliases
-- =======

local lua2header = lua2header.lua2header


-- Globals
-- =======

TARGET   = os.path.join (BUILDROOT, "luke")

SRCDIR   = os.path.join (PKGROOT, "src")
SHAREDIR = os.path.join (PKGROOT, "share")
LUADIR   = os.path.join (SRCDIR,  "lua")

TOKENS_SOURCE = os.path.join (SRCDIR, "luke.syms")
C_SOURCE      = os.path.join (SRCDIR, "luke.c")
LUA_SOURCE    = os.path.join (SRCDIR, "luke.lua")
LAKE_SOURCE   = os.path.join (SRCDIR, "self-extract.sh")

LUA_MODULES   = { "lpath" }


-- Utility Functions
-- =================

-- Compress and assemble the Lua sources, Luke driver, and support
-- files into a self-extracting file, diagnosing any changes required
-- to the symbol lists for complete coverage.
local function main ()
  local vfs   = {}      -- Virtual File System with priority over real FS
  local dirs  = { ".", SRCDIR, LUADIR }
  local lines = {}      -- A list of lines from a file

  -- Minify LUA_SOURCE with SrcDiet.
  local lua_source = {}
  for _, module in ipairs (LUA_MODULES) do
    local fh = io.open (os.path.join (SRCDIR, module..".lua"), "r")
    table.insert (lua_source, 
                  string.format ("package.preload['%s'] = (function ()",
                                 module))
    table.insert (lua_source, fh:read "*a")
    table.insert (lua_source, "end)")
  end
  local fh = io.open (LUA_SOURCE, "r")
  table.insert (lua_source, fh:read "*a")
  lua_source = table.concat (lua_source, "\n")
  local big  = #lua_source
  lua_source = squash.luafile (lua_source)

  -- Save the C header encoded from LUA_SOURCE into a VFS table.
  vfs["luke.h"] = lua2header (lua_source, "lukebuf")

  -- Recursively expand C_SOURCE, referring to VFS as necessary.
  lines = expand.file (C_SOURCE, dirs, vfs)
  big = big + #table.concat (lines, "\n")

  -- Load the token replacement maps.
  local mini, ugli, erase, no, bogus
  mini, ugli, erase, no, bogus = clex.tokenmap (TOKENS_SOURCE, lines)

  -- Diagnose unexpected tokens
  if next (no) ~= nil then
    print ("The following tokens should be added to '"..TOKENS_SOURCE.."',")
    print "possibly with a '#' prefix, if a preprocessor define is required"
    print "to avoid compiler errors, or else with a '!' prefix if the token"
    print "cannot be replaced at all (number in brackets following each"
    print "token counts how many bytes that token uses in the source):\n"

    order = {}
    for k, v in pairs (no) do
      order[1+ #order] = k
    end
    table.sort (order, function (p, q) return no[p] < no[q] end)

    for _, v in ipairs (order) do
      print (string.format ("%s [%s]", v, no[v]))
    end
  end

  if #bogus > 0 then
    print "\nThe following tokens are not used, and can be removed from"
    print ("'"..TOKENS_SOURCE.."' entirely:\n")
    for _, v in pairs (bogus) do
      print (v)
    end
  end

  -- Minify (whitespace and comment removal, and token replacement)
  -- and uglify (use preprocessor definitions to shorten frequent
  -- unsafe tokens) the expanded LINES.
  vfs["luke.c"] = squash.cfile (lines, mini, ugli, erase)

  -- Expand the newly squashed expanded `luke.c` lines into the
  -- self extracting shell script.
  lines = table.concat (expand.file (LAKE_SOURCE, dirs, vfs), "\n")

  -- Write out the result.
  local out = io.open (TARGET, "w")
  out:write (lines)
  local small = #lines

  -- Display compression stats.
  print (string.format ("compressed from %d to %d... %.2f%% smaller",
                        big, small, 100 - (100 * small / big)))

  return true
end -- main()


-- Build Rules
-- ===========

command = node {
  class = "command",
  ensure_at_least_one_child = false,

  __init = function (self, p)
    node.__init (self, p)

    -- If we're a class, don't verify.

    if (type (p) == "table") and p.class then
      return
    end

    -- Ensure that the command's children are strings.

    for i, j in ipairs (self) do
      if type (j) ~= "string" then
        self:__error ("doesn't know what to do with child ", i,
            ", which is a ", type (j), " but should be a string")
      end
    end
  end, -- __init

  __outputs = function (self, inputs)
    local o = {}
    local n
    if self.only_n_children_are_outputs then
      n = self.only_n_children_are_outputs
    else
      n = #inputs
    end

    for i = 1, n do
      o[i] = self:__expand (inputs[i])
    end

    return o
  end, -- __outputs

  __buildchildren = function (self)
    local outputs = {}
    table.append (outputs, self)
    return outputs
  end,

  __build = function (self)
    self:__invoke (self.command)
  end,

  __dobuild = function (self, inputs, outputs)
    self:__invoke (self.command, inputs, outputs)
  end,
}

TOTAL_INPUT_SIZE = 0

default = command {
  command = main,
}

check = command {
  command = testsuite,
}

--[[
squashlua = command {
  class = "squashlua",
  command = function ()
    local fh = io.open (LUA_SOURCE, "r")
    local lua_source = fh:read "*a"
    TOTAL_INPUT_SIZE = TOTAL_INPUT_SIZE + #lua_source
    lua_source = squash.luafile (lua_source)
    print "squashlua"
  end,
  outputs = {"$(U)-$(I).lua"},
  install = luke.install("luke-minified.lua"),
}

default = group {
  squashlua "$(LUA_SOURCE)",
}
--]]
